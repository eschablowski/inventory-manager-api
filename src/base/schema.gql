"""
A node instance is basically an instance of data.
This is useful for showing that every storage item has a unique identifier
"""
interface Node {
  id: ID! @cacheControl(maxAge: 3600, scope: PUBLIC)
}

type NodeEdge implements Edge {
  node: Node
  cursor: ID
}

type NodeConnection implements Connection {
  pageInfo: PageInfo!
  edges: [NodeEdge]
  totalCount: Int!
  nodes: [Node]
}

type PageInfo {
  hasPreviousPage: Boolean! @cacheControl(maxAge: 0, scope: PRIVATE)
  hasNextPage: Boolean!  @cacheControl(maxAge: 0, scope: PRIVATE)
  startCursor: ID!  @cacheControl(maxAge: 0, scope: PRIVATE)
  endCursor: ID!  @cacheControl(maxAge: 0, scope: PRIVATE)
}

interface Edge {
  node: Node!
  cursor: ID!  @cacheControl(maxAge: 30, scope: PUBLIC)
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge]
  totalCount: Int @cacheControl(maxAge: 30, scope: PUBLIC)
}

enum Operations {
  CREATE
  MERGE
  UPDATE
  DELETE
  REMOVE
}


enum SearchTypes {
  EXACT
  FULLTEXT
  FUZZY
  WILDCARD
  SQL
}

enum SearchOperators {
  AND
  OR
  NOT
}

type SearchParam {
  value: String!
  type: SearchTypes!
}

type SearchOpt {
  values: [SearchParam!]
  type: SearchOperators
}

union Search = SearchOpt | SearchParam

extend type Query {
  node(id: ID!): Node
  nodes(ids: [ID!], search: Search, first: Int, after: ID, last: Int, before: ID): NodeConnection
}

extend type Mutation {
  node(node: Node): Node
  nodes(nodes: [Node]): Node
}

extend type Subscription {
  node(id: ID!): Node
  nodes(ids: [ID!], search: Search, first: Int, after: ID, last: Int, before: ID): NodeConnection
}