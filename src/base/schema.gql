"""
# Node

Nodes are unique instances of Data, associated with an unique identifier, `id`.

> IDs are unique to each node, although nodes can have multiple IDs associated with them, as IDs have their own generation to allow for forward and backward compatibility.

[ID Specifications](https://gihub.com/eschablowski/inventory-manager-api/tree/specifications/id)
"""
interface Node {
  """
  # ID

  IDs are unique to each node, although nodes can have multiple IDs associated with them, as IDs have their own generation to allow for forward and backward compatibility.

  [ID Specifications](https://gihub.com/eschablowski/inventory-manager-api/tree/specifications/id)
  """
  id: ID @cacheControl(maxAge: 3600, scope: PUBLIC)
}

"""
# Node Edge

Node Edges are used to paginate through a list of `node`s.

> Useful for pagination
"""
type NodeEdge implements Edge {
  """
  The `Node` at the end of the edge
  """
  node: Node
  """
  # Cursor

  Cursors are comprised of `${node.id}:${ascending?}:${order column}`

  > Cursors are used in index-based pagination.
  """
  cursor: ID
}

"""
A connection to a list of Nodes.

Useful for pagination.
"""
type NodeConnection implements Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of Node Edges
  """
  edges: [NodeEdge]
  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the argument to "first", then fetch the total count so it could display "5 of 83", for example.
  """
  totalCount: Int!
  """
  A list of all the objects retunes in the connection.
  This is a convinience fild provided if edge data is not required.

  Any Production environment should NOT use this.
  """
  nodes: [Node]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When pagionating forwards are there more items?
  In other words, is this the end?
  """
  hasPreviousPage: Boolean! @cacheControl(maxAge: 0, scope: PRIVATE)
  """
  When paginating backwards, are there more items?
  In other words, is this the begining?
  """
  hasNextPage: Boolean! @cacheControl(maxAge: 0, scope: PRIVATE)
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: ID! @cacheControl(maxAge: 0, scope: PRIVATE)
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: ID! @cacheControl(maxAge: 0, scope: PRIVATE)
}

"""
An edge in a connection.
"""
interface Edge {
  """
  The Node at the end of the edge
  """
  node: Node
  """
  A cursor for use in pagination
  """
  cursor: ID @cacheControl(maxAge: 30, scope: PUBLIC)
}

"""
A connection to a list of items.
"""
interface Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo
  """
  A list of edges.
  """
  edges: [Edge]
  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the argument to "first", then fetch the total count so it could display "5 of 83", for example.
  """
  totalCount: Int
}

"""
Mutation operations supported.

Useful for shorter, more modular mutations.
"""
enum Operations {
  """
  Creates an instance if it does not exist.
  """
  CREATE
  """
  Merges an existing instance with the provided
  """
  MERGE
  """
  Overwrites all values with the provided ones, exept ID.
  """
  UPDATE
  """
  Deletes the specified instances.
  """
  DELETE
}

"""
Specifies how the query string should be interpreted.
"""
enum SearchTypes {
  """
  An exact match.
  """
  EXACT
  """
  Performs a full text search.
  """
  FULLTEXT
  """
  Performs a fuzzy search with the provided query.
  """
  FUZZY
  """
  Performs a wildcard search.

  * matches zero or more charachters.
  ? matches any charachter.
  """
  WILDCARD
  """
  Interprets the string as a regex.

  Only a subset of features are supported to prevent DoS attacks.
  """
  REGEX
}

"""
Ways to combine Searches.
"""
enum SearchOperators {
  AND
  OR
  NOT
}

"""
How to Search through a field.
"""
type SearchParam {
  """
  The query to search with.
  """
  query: String!
  """
  How to interpret the query.
  """
  type: SearchTypes!
}

"""
Defines multiple search queries to combine.
"""
type SearchOpt {
  """
  The queries to combine.
  """
  values: [SearchParam!]
  """
  How to combine the queries.
  """
  type: SearchOperators
}

"""
A search, so that the one doesn't have to combine searches.
"""
union Search = SearchOpt | SearchParam

"""
A search for a node.

Currently only supports searching for an id.
"""
type NodeSearch {
  """
  The id to search for.
  """
  id: Search!
}

input NodeInput {
  id: ID!
}

extend type Query {
  """
  Gets a node by its id.
  """
  node(id: ID!): Node
  """
  Gets multiple nodes by their ids, or a query.
  Supports pagination.
  """
  nodes(
    ids: [ID!]
    search: NodeInput
    first: Int
    after: ID
    last: Int
    before: ID
  ): NodeConnection
}

extend type Mutation {
  """
  Modifies a node, takes a node, with ID to modify as well as the operation to perform.
  """
  node(node: NodeInput!, operation: Operations!): Node
  """
  Modifies multiple nodes, takes an array of nodes to modify, along with the ID to modify and the Operation to perform
  """
  nodes(nodes: [NodeInput!]!, operation: Operations!): Node
}

extend type Subscription {
  """
  Subscribes to changes in a node, by its id.
  """
  node(id: ID!): Node
  """
  Subscribes to changes in multiple nodes.
  Takes in either ids or a search as well as pagination.
  """
  nodes(
    """
    The IDs of the nodes to subscribe to.
    """
    ids: [ID!]
    """
    A Search pattern for nodes to subscribe to.
    > If a new node is created, and listening for CREATE operations, the new 
    """
    search: NodeInput
    first: Int
    after: ID
    last: Int
    before: ID
    """
    The operations to subscribe to.
    """
    operations: [Operations] = [CREATE, MERGE, UPDATE, DELETE]
  ): NodeConnection
}
