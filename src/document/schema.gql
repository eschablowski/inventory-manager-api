# import Node, PageInfo, Edge, Operations from "../base/schema.gql"

"""
A Document describing an item, product, or order, as well as templates.
The uses for this are very extensive.
"""
type Document {
  """
  The unique ID of the document.
  """
  id: ID
  """
  The name displayed to the user, useful for more information as well as nicer names.
  """
  name: String
  """
  The filename of this document, used for determining download links, etc.
  """
  filename: String
  """
  The MIME type of the document.
  Useful for interpreting documents, showing them in browsers, as well as tracking viruses.
  See https://www.iana.org/assignments/media-types/media-types.xhtml for more information as well as possible values.
  """
  mime: String
  """
  The version of this document, useful to manage iterations of documentation.
  All versions are stored so that previous versions can still be accesed if the need arises.
  """
  version: String
  """
  The template engine this relies on, useful for generating documents, emails and other things dynamically fro m a single source.
  """
  template: Template
  """
  A URL to download the data from.
  Useful to show links or comncurrently download documents rather than having them encoded in the message.
  """
  url: String
  """
  The raw data stored in this document.
  This property should be used with care since the maximum limit for documents is currently 4GB, and only expected to grow.
  """
  data: String
  """
  A URL to download the rendered document from.
  Useful to show links or comncurrently download documents rather than having them encoded in the message.
  """
  renderedUrl: String
  """
  The rendered data stored in this document.
  This property should be used with care since the maximum limit for documents is currently 4GB (without rendering), and only expected to grow.
  """
  renderedData: String
}

input DocumentInput {
  id: ID!
  name: String!
  filename: String!
  mime: String!
  version: String!
  template: Template!
  data: String!
}

enum Template {
  NONE
  NUNJUCKS
}

type DocumentEdge implements Edge {
  node: Document
  cursor: ID!
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  edges: [DocumentEdge]
  totalCount: Int
  documents: [Document]
}

extend type Query {
  getDocument(id: ID): Document
  getDocuments(
    id: [ID!]
    search: DocumentInput
    first: Int
    after: ID
    last: Int
    before: ID
  ): DocumentConnection
  allDocuments(first: Int, after: ID, last: Int, before: ID): DocumentConnection
}

extend type Mutation {
  document(document: DocumentInput, operation: Operations = CREATE): Document
  createDocument(document: DocumentInput): ID!
  createDocuments(documents: [DocumentInput]): [Document]
  deleteDocument(id: ID!): Document
  deleteDocuments(
    search: DocumentInput
    first: Int
    after: ID
    last: Int
    before: ID
  ): DocumentConnection
}
